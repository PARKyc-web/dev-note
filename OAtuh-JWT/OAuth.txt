# OAtuh 2.0 (Open Authorization 2.0)
- 웹 및 애플리케이션 인증 및 권한 부여를 위한 개방형 표준 프로토콜, 서드파티 애플리케이션이 사용자의 리소스에 접근하기 위한 절차를 정의, 서비스 제공자의 API를 사용할 수 있는 권한을 부여
 > 사용자 정보를 가진 서버 이외에 다른 서버에서 사용자의 리소스를 사용하기 위한 절차 정의!
 > 그리고 사용자 정보에 권한을 부여

1. 현재 내 서비스에서 다른 서비스의 회원 정보를 사용하기 위해서 사용하는 규칙(프로토콜)
 > 내가 만든 웹페이지에서 네이버 로그인을 하려고 함 > 어떻게 네이버에서 그 회원정보를 가져올거야? > 회원정보의 형태, 종류 등을 정의한 것
 >: 네이버 로그인을 도입할 때, 네이버에서 어떤 정보를 가져올 것인가를 선택하는 절차가 있음
 >: 그리고 사용자가 처음 서비스에 네이버 로그인할 때, "정보 제공하시겠습니까?" 팝업이 뜨는것을 확인할 수 있음

2. 인증/인가 서비스에서 ID/PW를 받고 인증에 성공하면 Token 값을 줌 (보통 JWT를 사용함.)
 > 정확히는 Authorization Code를 받음
 > Authorization Code를 받고나서 서비스에서 바로 Access Token, Refresh Token 을 요청함.

3. Access Token / Refresh Token
 > Access Token은 API 요청에 사용하는 정보 
 > Refresh Token은 Access Token을 갱신하기 위한 정보

3.1 Access Token은 로컬에 저장 (캐시, 쿠키)
3.2 Refresh Token은 DB에 저장


4. 그렇다면 MSA에서 OAuth를 사용해서 인증/인가를 해결하려고 하면 각 마이크로서비스에 JWT를 검증하는 로직이 있어야하는가?
 > 동일한 코드를 똑같이 적어야하는가?
 >: 라이브러리로 만들어서 import 해서 사용함.
 >: 만약 Gateway가 있다면 게이트웨이에서 토큰에 대한 검증을 진행하고, 요청을 각 마이크로서비스로 뿌려줌


5. Access Token, Refresh Token 저장 위치 => 모든 Request에 토큰이 같이 가야함!
- Local Storage, Session Storage => XSS 공격에 취약
- Cookies ( Http Only, Secure ) => CSRF 가능성 존재

- Access Token => Cookies, Refresh Token => DB
 : JWT 토큰의 stateless 특성이 모호해짐 && 엑세스 토큰 만료 시, Refresh Token 조회를 위한 별도의 API가 필요함.


- Javascript에 Private 필드에 저장 
 : XSS, CSRF 공격 방지 But 새로고침을 하게되면 토큰이 사라짐 
  => 그러나 Vue라서 페이지가 이동해도 사라지지 않음 ( SPA 특징 )
  => 새로고침을 할 경우, Refresh Token 및 Access Token을 조회할 수 있는 API가 필요

- 메모리
 : 이게 Javascript Private 필드에 저장하는 방식


어떤 방식으로 소개하는게 좋을까?

1. Access Token => Memory ( Javascript Private Field )
   Refresh Token => Http Only + Scure Cookies

2. Access Token => Http Only + Scure Cookies
   Refresh Token => DB

3. Access Token / Refresh Token => Http Only + Scure Cookies



1. 모놀리식 아키텍처에서는 서버에서 인증/인가(로그인)를 하면 Session에 저장하는 방식으로 처리함.




세미나 할때 어떤 순서로 진행을 해야하지?

일단 
타이틀 : OAuth 2.0 / JWT 
목차  : JWT > OAuth 2.0 > OAuth 2.0 + JWT > 

# JWT 

1. JWT란 무엇인가?
: JSON Web Token를 의미하며 인터넷 표준 인증 방식을 의미한다.

원래 모놀리식 아키텍쳐에서는 Session과 Cookies를 이용해서 로그인 정보를 저장하고, 인증/인가 로직을 구현함.
그러나 Scale-out, MSA 아키텍쳐 등 기술의 변화로 기존의 Session, Cookies로 처리할 수 없는 인증/인가 로직을 구현하기 위해
만들어직 새로운 인증/인가를 위한 표준 


2. JWT의 구성
: JWT는 크게 Header, Payload, Signature 3가지로 구성된다.

JWT는 xxxx.yyyy.zzzz 형태로 .을 기준으로 Header, Payload, Signature 3가지로 구성되어있다.

Header에는 토큰의 타입, 토큰 Signature의 알고리즘
Payload에는 토큰의 주요 정보들이 들어간다. 토큰의 정보는 Base64 로 Encoding 되기 때문에 민감한 정보는 담으면 안된다.

인증/인가에서 사용한다고 하면 로그인 계정, 로그인 일시, 토큰 발급시간, 토큰 만료시간과 같이 공개되어도 무방한 데이터를 보낸다.

Signature는 Header와 Payload 값을 검증하기 위한 내용으로 구성되는데
Header에 작성된 토큰의 알고리즘으로

암호화 알고리즘 ({Header값 . Payload값 . 개인키})

JWT Token은 "Header(Base64-Encode-text).Payload(Base64-Encode-text).Signature(secret 256bit String)"   

그래서 JWT 토큰이 보낼때 Payload, Header를 변경하더라도 Signature를 통해서 유효성을 검사할 수 있다.

Signature에 사용하는 개인키는 256-bit 를 미리 결정해서 안전하게 관리한다.


# OAuth 2.0
 : 


1. 어떻게 등장했는가??
 > 

OAuth가 생기기 이전에 다른 서비스의 API를 사용하기 위해서는 나의 서비스에서 유저의 ID/PW를 관리할 필요가 있다.

ex: 계좌를 한 곳에서 관리해주는 서비스가 있음 ( Toss )
    내 계좌 정보를 확인하기 위해서 대구은행에 정보를 주세요!
    > 


만약 특정 유저의 서비스 이력에 대한 정보가 필요하다고 가정

ex




