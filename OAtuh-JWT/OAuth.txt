# OAtuh 2.0 (Open Authorization 2.0)
- 웹 및 애플리케이션 인증 및 권한 부여를 위한 개방형 표준 프로토콜, 서드파티 애플리케이션이 사용자의 리소스에 접근하기 위한 절차를 정의, 서비스 제공자의 API를 사용할 수 있는 권한을 부여
 > 사용자 정보를 가진 서버 이외에 다른 서버에서 사용자의 리소스를 사용하기 위한 절차 정의!
 > 그리고 사용자 정보에 권한을 부여

1. 현재 내 서비스에서 다른 서비스의 회원 정보를 사용하기 위해서 사용하는 규칙(프로토콜)
 > 내가 만든 웹페이지에서 네이버 로그인을 하려고 함 > 어떻게 네이버에서 그 회원정보를 가져올거야? > 회원정보의 형태, 종류 등을 정의한 것
 >: 네이버 로그인을 도입할 때, 네이버에서 어떤 정보를 가져올 것인가를 선택하는 절차가 있음
 >: 그리고 사용자가 처음 서비스에 네이버 로그인할 때, "정보 제공하시겠습니까?" 팝업이 뜨는것을 확인할 수 있음

2. 인증/인가 서비스에서 ID/PW를 받고 인증에 성공하면 Token 값을 줌 (보통 JWT를 사용함.)
 > 정확히는 Authorization Code를 받음
 > Authorization Code를 받고나서 서비스에서 바로 Access Token, Refresh Token 을 요청함.

3. Access Token / Refresh Token
 > Access Token은 API 요청에 사용하는 정보 
 > Refresh Token은 Access Token을 갱신하기 위한 정보

3.1 Access Token은 로컬에 저장 (캐시, 쿠키)
3.2 Refresh Token은 DB에 저장


4. 그렇다면 MSA에서 OAuth를 사용해서 인증/인가를 해결하려고 하면 각 마이크로서비스에 JWT를 검증하는 로직이 있어야하는가?
 > 동일한 코드를 똑같이 적어야하는가?
 >: 라이브러리로 만들어서 import 해서 사용함.
 >: 만약 Gateway가 있다면 게이트웨이에서 토큰에 대한 검증을 진행하고, 요청을 각 마이크로서비스로 뿌려줌

5. 



1. 모놀리식 아키텍처에서는 서버에서 인증/인가(로그인)를 하면 Session에 저장하는 방식으로 처리함.